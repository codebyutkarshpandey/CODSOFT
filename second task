import math

# Human: X | AI: O
HUMAN = 'X'
AI = 'O'
EMPTY = ' '

# Create a 3x3 board
def create_board():
    return [[EMPTY for _ in range(3)] for _ in range(3)]

# Print the board
def print_board(board):
    print("-------------")
    for row in board:
        print("|", end="")
        for cell in row:
            print(f" {cell if cell != EMPTY else ' '} |", end="")
        print("\n-------------")

# Check if there is a winner or draw
def check_winner(board):
    # Rows, Columns, Diagonals
    lines = board + [list(col) for col in zip(*board)]  # Rows + Columns
    lines += [[board[i][i] for i in range(3)], [board[i][2-i] for i in range(3)]]  # Diagonals

    for line in lines:
        if line.count(line[0]) == 3 and line[0] != EMPTY:
            return line[0]  # 'X' or 'O'
    if all(cell != EMPTY for row in board for cell in row):
        return 'Draw'
    return None  # No winner yet

# Get available moves
def get_available_moves(board):
    return [(i, j) for i in range(3) for j in range(3) if board[i][j] == EMPTY]

# Minimax Algorithm
def minimax(board, depth, is_maximizing):
    winner = check_winner(board)
    if winner == AI:
        return 1
    elif winner == HUMAN:
        return -1
    elif winner == 'Draw':
        return 0

    if is_maximizing:
        best_score = -math.inf
        for (i, j) in get_available_moves(board):
            board[i][j] = AI
            score = minimax(board, depth + 1, False)
            board[i][j] = EMPTY
            best_score = max(score, best_score)
        return best_score
    else:
        best_score = math.inf
        for (i, j) in get_available_moves(board):
            board[i][j] = HUMAN
            score = minimax(board, depth + 1, True)
            board[i][j] = EMPTY
            best_score = min(score, best_score)
        return best_score

# Find best move for AI
def find_best_move(board):
    best_score = -math.inf
    best_move = None
    for (i, j) in get_available_moves(board):
        board[i][j] = AI
        score = minimax(board, 0, False)
        board[i][j] = EMPTY
        if score > best_score:
            best_score = score
            best_move = (i, j)
    return best_move

# Main game loop
def play_game():
    board = create_board()
    print("Welcome to Tic-Tac-Toe!")
    print_board(board)

    while True:
        # Human Move
        while True:
            try:
                move = input("Enter your move (row and column: 0 1): ")
                x, y = map(int, move.strip().split())
                if board[x][y] == EMPTY:
                    board[x][y] = HUMAN
                    break
                else:
                    print("That cell is already taken. Try again.")
            except:
                print("Invalid input. Please enter row and column as two numbers (e.g., 1 2).")

        print_board(board)
        result = check_winner(board)
        if result:
            print(f"Game Over! Result: {result}")
            break

        # AI Move
        print("AI is thinking...")
        ai_move = find_best_move(board)
        if ai_move:
            board[ai_move[0]][ai_move[1]] = AI
        print_board(board)

        result = check_winner(board)
        if result:
            print(f"Game Over! Result: {result}")
            break

# Run the game
if __name__ == "__main__":
    play_game()
